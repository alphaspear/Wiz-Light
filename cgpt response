Got it! You want your main application to connect to the Cloud SQL instance while your test classes should run against a PostgreSQL test container. Here's how you can achieve this setup.
Configuration

    Application Configuration:
        Your main application should have a configuration to connect to the Cloud SQL instance.
        Your test configuration should override this to connect to the test container.

    Profile-based Configuration:
        Use Spring profiles to separate configurations for different environments (e.g., application-cloudsql.yml for Cloud SQL and application-test.yml for tests).

application-cloudsql.yml (For Cloud SQL Connection)

yaml

spring:
  datasource:
    url: jdbc:postgresql://<cloudsql-instance-ip>:<port>/<database-name>
    username: <username>
    password: <password>
  jpa:
    hibernate:
      ddl-auto: update

application-test.yml (For Test Container Connection)

This file is not strictly necessary because the test properties can be set programmatically, but having it can simplify the process if you prefer configuration files.

yaml

spring:
  datasource:
    url: jdbc:postgresql://localhost/testdb
    username: test
    password: test
  jpa:
    hibernate:
      ddl-auto: update

build.gradle

Ensure you have the necessary dependencies:

groovy

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
}

Test Configuration

Create a test class that uses Testcontainers and sets up the PostgreSQL test container.

java

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

@SpringBootTest
@Testcontainers
public class MyApplicationTests {

    @Container
    public static PostgreSQLContainer<?> postgresDB = new PostgreSQLContainer<>("postgres:13.3")
            .withDatabaseName("testdb")
            .withUsername("test")
            .withPassword("test");

    @DynamicPropertySource
    static void postgresProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", postgresDB::getJdbcUrl);
        registry.add("spring.datasource.username", postgresDB::getUsername);
        registry.add("spring.datasource.password", postgresDB::getPassword);
    }

    @Test
    void contextLoads() {
        // Your test cases here
    }
}

Activating Profiles

    For Main Application:
        Ensure the default profile (application-cloudsql.yml) is used for production.

    For Tests:
        Spring Boot will automatically use the properties provided in the DynamicPropertySource. However, you can specify additional test configurations in application-test.yml if needed.
        Make sure your test uses the test profile by adding @ActiveProfiles("test") to your test class.

java

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

@SpringBootTest
@Testcontainers
@ActiveProfiles("test")
public class MyApplicationTests {

    @Container
    public static PostgreSQLContainer<?> postgresDB = new PostgreSQLContainer<>("postgres:13.3")
            .withDatabaseName("testdb")
            .withUsername("test")
            .withPassword("test");

    @DynamicPropertySource
    static void postgresProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", postgresDB::getJdbcUrl);
        registry.add("spring.datasource.username", postgresDB::getUsername);
        registry.add("spring.datasource.password", postgresDB::getPassword);
    }

    @Test
    void contextLoads() {
        // Your test cases here
    }
}

With this setup, your main application will connect to the Cloud SQL PostgreSQL instance, while your test classes will use a PostgreSQL test container. This ensures that your tests are isolated and do not depend on the Cloud SQL instance, improving test reliability and speed.
